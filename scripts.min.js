(() => {
  // Constants
  const DARK_MODE_START = 20;
  const DARK_MODE_END = 7;
  const STORAGE_KEY = 'prefersDarkMode';
  
  // DOM Elements
  const body = document.body;
  const themeSwitch = document.querySelector('.theme-switch');
  
  // Functions
  const isDarkModeTime = () => {
    const hour = new Date().getHours();
    return hour >= DARK_MODE_START || hour < DARK_MODE_END;
  };
  
  const setDarkMode = (isDark) => {
    try {
      body.classList.toggle('dark-mode', isDark);
      localStorage.setItem(STORAGE_KEY, isDark);
    } catch (e) {
      console.warn('Could not save theme preference:', e);
    }
    
    // Update theme color meta tag
    document.getElementById('theme-color').content = 
      isDark ? '#1a1a1a' : '#ffffff';
    
    // Update aria-label
    themeSwitch.setAttribute('aria-label', 
      isDark ? 'Switch to light mode' : 'Switch to dark mode'
    );
  };
  
  const toggleDarkMode = () => {
    const isDark = !body.classList.contains('dark-mode');
    setDarkMode(isDark);
  };
  
  const initDarkMode = () => {
    // Check stored preference first
    const storedPreference = localStorage.getItem(STORAGE_KEY);
    if (storedPreference !== null) {
      setDarkMode(storedPreference === 'true');
      return;
    }
    
    // Check system preference
    if (window.matchMedia) {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (prefersDark) {
        setDarkMode(true);
        return;
      }
    }
    
    // Fall back to time-based
    setDarkMode(isDarkModeTime());
  };
  
  // Add debouncing for theme switch
  const debounce = (func, wait) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  };
  
  const debouncedSetDarkMode = debounce(setDarkMode, 150);
  
  // Event Listeners
  themeSwitch.setAttribute('aria-busy', 'true');
  document.addEventListener('DOMContentLoaded', () => {
    initDarkMode();
    themeSwitch.setAttribute('aria-busy', 'false');
  });
  themeSwitch.addEventListener('click', toggleDarkMode);
  
  // Listen for system dark mode changes
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', e => debouncedSetDarkMode(e.matches));
  }
  
  // Add keyboard support
  themeSwitch.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      toggleDarkMode();
    }
  });
})();
